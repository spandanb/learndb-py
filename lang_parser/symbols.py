from __future__ import annotations
import dataclasses
import os
from lark import Lark, logger, ast_utils, Transformer
from typing import Any, List
from dataclasses import dataclass

# logger.setLevel(logging.DEBUG)


WHITESPACE = ' '


class _Ast(ast_utils.Ast):
    """
    The root of AST hierarchy
    """
    # NOTE: classes with preceding "_" will be skipped

    def is_virtual(self) -> bool:
        """
        Helper method to determine whether symbol/parsed
        rules' class is virtual, i.e. won't be materialized.
        Classes whose names begins with "_" are virtual.
        :return:
        """
        classname = self.__class__.__name__
        return classname.startswith("_")

    def get_prettychild(self, child, child_depth) -> list:
        """
        Get pretty printed child; calls different method depending on whether
        child is derived from _Ast, Lark.Tree, or Lark.Token.

        :param child:
        :param child_depth:
        :return:
        """
        if hasattr(child, "prettyprint"):
            # part of Ast hierarchy
            val = child.prettyprint(depth=child_depth)
        elif hasattr(child, "pretty"):
            # part of autogenerated hierarchy
            preceding = WHITESPACE * child_depth
            formatted = f"{preceding}{child.pretty(preceding)}"
            val = [formatted]
        else:
            # token
            preceding = WHITESPACE * child_depth
            formatted = f"{preceding}{str(child)}"
            val = [formatted]
        return val

    def prettyprint(self, depth=0) -> List:
        """
        return a pretty printed string
        :return:
        """
        children = dataclasses.asdict(self)
        lines = []

        child_depth = depth if self.is_virtual() else depth + 1
        preceding = WHITESPACE * depth
        if not self.is_virtual():
            classname = self.__class__.__name__
            lines.append(f'{preceding}{classname}:{os.linesep}')

        for key, value in children.items():
            child = getattr(self, key)
            if isinstance(child, list):
                # list
                for element in child:
                    lines.extend(self.get_prettychild(element, child_depth))
            else:
                # scalar
                lines.extend(self.get_prettychild(child, child_depth))

        return lines



@dataclass
class Program(_Ast, ast_utils.AsList):
    statements: List[_Stmnt]


# is this even needed
class _Stmnt(_Ast):
    pass


@dataclass
class SelectStmnt(_Ast):
    select_clause: _Selectables
    from_clause: FromClause = None
    group_by_clause: Any = None
    having_clause: Any = None
    order_by_clause: Any = None
    limit_clause: Any = None


@dataclass
class _Selectables(_Ast,  ast_utils.AsList):
    selections: List[Selectable]


@dataclass
class Selectable(_Ast):
    item: Any


@dataclass
class FromClause(_Ast):
    source: Any
    # where clauses is nested in from, i.e. in a select
    # a where clause without a from clause is invalid
    where_clause: Any = None
