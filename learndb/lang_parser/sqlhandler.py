from __future__ import annotations
import logging

from lark import Lark
from lark.exceptions import UnexpectedInput  # root of all lark exceptions

from .symbols import ToAst
from .grammar import GRAMMAR


logger = logging.getLogger(__name__)


class SqlFrontEnd:
    """
    Parser for learndb lang, based on lark definition
    """

    def __init__(self, raise_exception=False, debug_mode=True):
        self.parser = None
        # parse tree generated by Lark
        self.parse_tree = None
        # abstract syntax tree, output of parse tree being transformed
        self.tree = None
        self.exc = None  # exception
        self.is_succ = False
        self.raise_exception = raise_exception
        self._init()
        self.debug_mode = debug_mode

    def _init(self):
        self.parser = Lark(GRAMMAR, parser="earley", start="program", debug=True)

    def error_summary(self):
        if self.exc is not None:
            return str(self.exc)

    def is_success(self):
        """
        whether parse operation is success
        # TODO: this and other methods should raise if no parse
        :return:
        """
        return self.is_succ

    def get_parsed(self):
        return self.tree

    def parse(self, text: str):
        """

        :param text:
        :return:
        """
        # parse tree
        try:
            self.parse_tree = self.parser.parse(text)
            transformer = ToAst()
            self.tree = transformer.transform(self.parse_tree)
            self.is_succ = True
            self.exc = None
        except UnexpectedInput as e:
            self.exc = e
            self.parse_tree = None
            self.tree = None
            self.is_succ = False
            if self.raise_exception:
                raise

    def debug(self):
        """
        print some debug info on recent parse
        """
        logger.info("Outputting parse tree (untransformed)...")
        print(self.parse_tree.pretty())
        logger.info("Outputting AST...")
        print(self.tree)
