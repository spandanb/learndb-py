from __future__ import annotations
import logging
import os
import sys
import dataclasses
from dataclasses import dataclass

from lark import Lark, logger, ast_utils, Transformer
from lark.exceptions import UnexpectedInput  # root of all lark exceptions
from typing import Any, List

logger.setLevel(logging.DEBUG)

this_module = sys.modules[__name__]

WHITESPACE = ' '


class _Ast(ast_utils.Ast):
    """
    The root of AST hierarchy
    """
    # NOTE: classes with preceding "_" will be skipped

    def is_virtual(self) -> bool:
        """
        Helper method to determine whether symbol/parsed
        rules' class is virtual, i.e. won't be materialized.
        Classes whose names begins with "_" are virtual.
        :return:
        """
        classname = self.__class__.__name__
        return classname.startswith("_")

    def get_prettychild(self, child, child_depth) -> list:
        """
        Get pretty printed child; calls different method depending on whether
        child is derived from _Ast, Lark.Tree, or Lark.Token.

        :param child:
        :param child_depth:
        :return:
        """
        if hasattr(child, "prettyprint"):
            # part of Ast hierarchy
            val = child.prettyprint(depth=child_depth)
        elif hasattr(child, "pretty"):
            # part of autogenerated hierarchy
            preceding = WHITESPACE * child_depth
            formatted = f"{preceding}{child.pretty(preceding)}"
            val = [formatted]
        else:
            # token
            preceding = WHITESPACE * child_depth
            formatted = f"{preceding}{str(child)}"
            val = [formatted]
        return val

    def prettyprint(self, depth=0) -> list:
        """
        return a pretty printed string
        :return:
        """
        children = dataclasses.asdict(self)
        lines = []

        child_depth = depth if self.is_virtual() else depth + 1
        preceding = WHITESPACE * depth
        if not self.is_virtual():
            classname = self.__class__.__name__
            lines.append(f'{preceding}{classname}:{os.linesep}')

        for key, value in children.items():
            child = getattr(self, key)
            if isinstance(child, list):
                for element in child:
                    lines.extend(self.get_prettychild(element, child_depth))
            else:
                # scalar
                lines.extend(self.get_prettychild(child, child_depth))

        return lines


@dataclass
class Program(_Ast, ast_utils.AsList):
    statements: List[_Stmnt]


# is this even needed
class _Stmnt(_Ast):
    pass


@dataclass
class SelectStmnt(_Ast):
    select_clause: _Selectables
    from_clause: FromClause = None
    group_by_clause: Any = None
    having_clause: Any = None
    order_by_clause: Any = None
    limit_clause: Any = None


@dataclass
class _Selectables(_Ast,  ast_utils.AsList):
    selections: List[Selectable]


@dataclass
class Selectable(_Ast):
    item: Any


@dataclass
class FromClause(_Ast):
    source: Any
    # where clauses is nested in from, i.e. in a select
    # a where clause without a from clause is invalid
    where_clause: Any = None


# Not sure how
@dataclass
class SourceX(_Ast):
    source: Any
    #join_modifier: Any = None
    #other_source: Any = None
    #join_condition: Any = None


# NOTES about lark
# NOTE: terminal we want to capture must be named

# this is a grammar for a subset of learndb-sql
grammar = '''
        program          : (stmnt ";")*
        ?stmnt           : select_stmnt | drop_stmnt
        select_stmnt     : select_clause from_clause? group_by_clause? having_clause? order_by_clause? limit_clause?

        select_clause    : "select"i selectables
        selectables      : column_name ("," column_name)*
        from_clause      : "from"i source where_clause?
        where_clause     : "where"i condition
        group_by_clause  : "group"i "by"i column_name ("," column_name)*
        having_clause    : "having"i condition
        order_by_clause  : "order"i "by"i (column_name ("asc"i|"desc"i)?)*
        limit_clause     : "limit"i INTEGER_NUMBER ("offset"i INTEGER_NUMBER)?

        // NOTE: there should be no on-clause on cross join and this will have to enforced post parse
        ?source           : table_name table_alias?
                          | joining
        
        ?joining          : source join_modifier? "join"i table_name table_alias? "on"i condition
        
        //join_modifier    : "inner"i | ("left"i "outer"i?) | ("right"i "outer"i?) | ("full"i "outer"i?) | "cross"i
        join_modifier    : inner | left_outer | right_outer | full_outer | cross
        
        inner            : "inner"i
        left_outer       : "left"i ["outer"i]
        right_outer      : "right"i ["outer"i]
        full_outer       : "full"i ["outer"i]
        cross            : "cross"i
        
        condition        : or_clause
        ?or_clause        : and_clause
                         | or_clause "or"i and_clause
        ?and_clause       : predicate
                         | and_clause "and"i predicate
   
        ?predicate        : comparison
                         | predicate ( EQUAL | NOT_EQUAL ) comparison
        ?comparison       : term
                         | comparison ( LESS_EQUAL | GREATER_EQUAL | LESS | GREATER ) term
        ?term             : factor
                         | term ( "-" | "+" ) factor
        ?factor           : unary
                         | factor ( "/" | "*" ) unary 
        ?unary            : primary
                         | ( "!" | "-" ) unary                 
        ?primary          : INTEGER_NUMBER | FLOAT_NUMBER | STRING | "true"i | "false"i | "null"i
                         | IDENTIFIER

        drop_stmnt       : "drop"i "table"i table_name

        FLOAT_NUMBER     : INTEGER_NUMBER "." ("0".."9")*

        column_name      : IDENTIFIER
        table_name       : IDENTIFIER
        table_alias      : IDENTIFIER

        // keywords
        // define keywords as they have higher priority
        // todo: are these needed?
        SELECT.5           : "select"i
        FROM.5             : "from"i
        WHERE.5            : "where"i
        JOIN.5             : "join"i
        ON.5               : "on"i

        // operators
        STAR              : "*"
        LEFT_PAREN        : "("
        RIGHT_PAREN       : ")"
        LEFT_BRACKET      : "["
        RIGHT_BRACKET     : "]"
        DOT               : "."
        EQUAL             : "="
        LESS              : "<"
        GREATER           : ">"
        COMMA             : ","

        // 2-char ops
        LESS_EQUAL        : "<="
        GREATER_EQUAL     : ">="
        NOT_EQUAL         : "<>" | "!="

        SEMICOLON         : ";"

        IDENTIFIER       : ("_" | ("a".."z") | ("A".."Z"))* ("_" | ("a".."z") | ("A".."Z") | ("0".."9"))+

        %import common.ESCAPED_STRING   -> STRING
        %import common.SIGNED_NUMBER    -> INTEGER_NUMBER
        %import common.WS
        %ignore WS
'''



class ToAst(Transformer):
    pass
    # todo: this should convert literals to datatype


def driver():
    parser = Lark(grammar, parser='earley', start="program", debug=True)  # , ambiguity='explicit')
    # text = "select cola from foo;"
    text = "select cola from foo f join bar b on f.x <> b.w;"
    text = "select cola, colb from foo where cola <> colb and colx > coly;"
    text = "select cola, colb from foo join bar on where cola <> colb and colx > coly;"
    text = "select cola, colb from foo left outer join bar on where cola <> colb and colx > coly having foo > 4;    "
    text = """select cola, colb from foo left outer join bar b on x = 1 
    cross join jar j on jb = xw where cola <> colb and colx > coly;
    drop table foo;"""
    text = "select cola, colb from foo f left join bar r on fx = ry;"
    #text = "drop table foo"

    # parse tree
    print(parser.parse(text).pretty())
    #return

    # Ast
    tree = parser.parse(text)
    transformer = ast_utils.create_transformer(this_module, ToAst())
    tree = transformer.transform(tree)
    pretty = tree.prettyprint()
    pretty = os.linesep.join(pretty)
    print(pretty)
    #print(tree.children[0].select_clause.children[0].Selections)
    return tree


#driver0()
driver()
