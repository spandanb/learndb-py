Overview
--------
I want to explicate the file format details for learndb. It's largely inspired by sqlite- with many simplifications.
NOTE: the details of the file format may be contained in other docs; but this doc is standalone and authoritative.

Internal Node
-------------
The current internal nodes will largely be unchanged i.e.

    nodetype .. is_root .. parent_pointer
    num_keys .. right-child-ptr
    ptr 0 .. key 0 .. ptr N-1 key N-1

Internal nodes require keys to be word-sized integers


Leaf Node Layout
-----------------
Leaf nodes will be formatted like:

- (low address) header, cell pointer array, unallocated space, cells (high address)
- header:
    nodetype .. is_root .. parent_pointer
    num_cells .. alloc_ptr .. free_list_head_ptr .. total_bytes_in_free_list
    ...
    cellptr_0, cellptr_1,... cellptr_N
    ...
    unallocated-space
    ...
    cells

Leaf Node Cell Ptrs
-------------------
- cell ptrs are sorted by key (word size);
- contain absolute page offset to cell

Leaf Node Cell
--------------
- cell -> [key-size, data-size, key-payload, data-payload)]
    -- data payload will be divided into header and body
    -- data header -> [size of header, serial types (size of variable length value)]
    -- data body -> concatenated bytes of serialized values (in definition order)
    -- all data must fit in a cell, i.e. no overflow- this limits the max content size to what can fit in a single cell
    -- NOTE: the key size is fixed to word size for now
        -- encoding key size will make supporting variable length keys easier
        -- variable sized keys would also require updating internal node logic


Serial Types
------------
    sqlite for inspiration (https://www.sqlite.org/fileformat2.html#record_format)

        serial-type  byte-length  datatype
        0            0            Null
        1            4            Integer
        2            4            Float
        3            var          Text
        4            var          Blob

    Types with a fixed-value, e.g. null will not be encoded in the data payload.


Free Space on Leaf Nodes
------------------------
Free space is managed via:
1) Allocation block -
    - bounded by the right most (maximal address) of a cell ptr
    - bounded by first allocation cell
    - Allocation ptr (alloc_ptr) moves towards smaller addresses
    - alloc_ptr points past the first allocatable byte, i.e. on page of size 4096 it is initialized to 4096.
        - the last indexable byte is 4095

2) Free list - singly-linked list
    - each free nodes stores: 1) size of current block, 2) location (abs offset) of next block
    - also store total number of free bytes


Storage
-------
Most fields will be a word length, unless otherwise noted.